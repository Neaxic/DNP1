@page "/Adults"
@using Models
@using global::Data
@using global::Models
@inject ITodosData adultData

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>Family</h3>

<p>
    Search (Name): 
    <input type="text" @oninput="@((arg) => FilterByName(arg))"/>
</p>

@if (adults == null)
{
    <p> Loading...</p>
}
else if (!adults.Any())
{
    <p>
        <em>No Adults item exist</em>
    </p>
}
else
{
    <AuthorizeView>
        <NotAuthorized>
            <table class="table">
                <thead>
                <tr>
                    <th>Firstname</th>
                    <th>Lastname</th>
                    <th>Age</th>
                    <th>Sex</th>
                </tr>
                </thead>

                <tbody>
                @foreach (var item in shown)
                {
                    <tr>
                        <td>@item.FirstName</td>
                        <td>@item.LastName</td>
                        <td>@item.Age</td>
                        <td>@item.Sex</td>
                    </tr>
                }
                </tbody>
            </table>
        </NotAuthorized>
        <Authorized>
            <table class="table">
                <thead>
                <tr>
                    <th>Firstname</th>
                    <th>Lastname</th>
                    <th>Age</th>
                    <th>Sex</th>
                    <th>Weight</th>
                    <th>Height</th>
                    <th>Hair color</th>
                    <th>Eye color</th>
                    <th>Job Title</th>
                    <th>Job Salary</th>
                    <th>Remove</th>
                    <th>Edit</th>
                </tr>
                </thead>

                <tbody>
                @foreach (var item in shown)
                {
                    <tr>
                        <td>@item.FirstName</td>
                        <td>@item.LastName</td>
                        <td>@item.Age</td>
                        <td>@item.Sex</td>
                        <td>@item.Weight</td>
                        <td>@item.Height</td>
                        <td>@item.HairColor</td>
                        <td>@item.EyeColor</td>
                        <td>@item.JobTitle.JobTitle</td>
                        <td>@item.JobTitle.Salary</td>
                        <td>
                            <button @onclick="@(() => RemoveAdult(item.Id))">
                                <i class="oi oi-trash" style="color:red"/>
                            </button>
                        </td>
                        <td>
                            <button @onclick="@(() => Edit(item.Id))">
                                <i class="oi oi-pencil" style="color:#1b6ec2"/>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </Authorized>
    </AuthorizeView>
}


@code {
    private IList<Adult> shown;
    private IList<Adult> adults;

    protected override async Task OnInitializedAsync()
    {
        adults = adultData.GetAdults();
        shown = adults;
    }
    
    private void FilterByName(ChangeEventArgs evt)
    {
        string name = evt.Value?.ToString();

        if (name.Length > 0)
        {
            shown = shown.Where(a => a.FirstName.ToLower().Contains(name.ToLower()) || a.LastName.ToLower().Contains(name.ToLower())).ToList();
        }
        else
        {
            shown = adults;
        }
    }

    private void RemoveAdult(int AdultID)
    {
        Adult adultToRemove = adults.First(t => t.Id == AdultID);
        adultData.RemoveAdult(AdultID);
        adults.Remove(adultToRemove);
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"Edit/{id}");
    }

}